#!/bin/bash
# ==============================================================================
# Start nginx service for ingress support
# ==============================================================================

echo "$(date '+%Y-%m-%d %H:%M:%S') Starting Nginx for ingress support..."

# Create required directories
mkdir -p /var/log/nginx
mkdir -p /var/lib/nginx/body
mkdir -p /etc/nginx/includes

# Check if port 8099 is already in use
if netstat -tuln 2>/dev/null | grep -q ":8099 "; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') WARNING: Port 8099 is already in use by another process"
    # Try to identify which process is using the port
    if command -v lsof >/dev/null 2>&1; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') Process using port 8099:"
        lsof -i :8099
    elif command -v fuser >/dev/null 2>&1; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') Process using port 8099:"
        fuser -n tcp 8099
    else
        echo "$(date '+%Y-%m-%d %H:%M:%S') Cannot determine which process is using port 8099"
    fi
    
    # Try to kill the process using port 8099
    echo "$(date '+%Y-%m-%d %H:%M:%S') Attempting to free port 8099..."
    if command -v fuser >/dev/null 2>&1; then
        fuser -k -n tcp 8099 || true
    fi
    
    # Wait a moment for the port to be released
    sleep 2
fi

# Remove any default nginx configuration that might be causing conflicts
rm -f /etc/nginx/conf.d/default.conf
rm -f /etc/nginx/sites-enabled/default

# Create nginx configuration if it doesn't exist
if [ ! -f "/etc/nginx/nginx.conf" ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') Creating nginx configuration..."
    cat > /etc/nginx/nginx.conf << 'EOF'
worker_processes 1;
pid /var/run/nginx.pid;
error_log /dev/stdout info;
daemon off;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    proxy_read_timeout 1200;
    gzip on;
    gzip_disable "msie6";
    
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    
    # Ingress configuration
    server {
        listen 8099 default_server;
        
        # Allow all connections from Home Assistant
        
        server_name _;
        access_log /dev/stdout combined;
        
        client_max_body_size 64M;
        keepalive_timeout 65;
        
        location / {
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            proxy_redirect off;
            proxy_buffering off;
        }
    }
}
EOF
else
    # Ensure the existing configuration doesn't have port 80
    sed -i 's/listen 80/listen 8099/g' /etc/nginx/nginx.conf
fi

# Verify nginx configuration
echo "$(date '+%Y-%m-%d %H:%M:%S') Verifying nginx configuration..."
if nginx -t; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') Nginx configuration is valid"
else
    echo "$(date '+%Y-%m-%d %H:%M:%S') ERROR: Nginx configuration is invalid"
    # Continue anyway, as we don't want to block the startup
fi

# Check if nginx is already running
if pgrep -x "nginx" > /dev/null; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') Nginx is already running, restarting..."
    nginx -s stop || true
    sleep 2
fi

echo "$(date '+%Y-%m-%d %H:%M:%S') Nginx configuration ready, starting nginx..."

# Start nginx with explicit configuration file to avoid defaults
exec nginx -c /etc/nginx/nginx.conf -g "daemon off;" 